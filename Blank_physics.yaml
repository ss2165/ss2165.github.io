$promise: {}
name: Blank_Physics
server_modules: []
startup_form: Form1
forms:
- class_name: Form1
  container:
    type: GridPanel
    properties: {row_spacing: 10}
  components:
  - type: Button
    properties: {width: default, align: center, height: '', enabled: true, visible: true,
      text: Reset, font_size: '14', italic: false, background: '', bold: false, underline: false}
    name: btn_reset
    layout_properties: {row: TTUYGN, width_xs: 3, col_xs: 6}
    event_bindings: {click: btn_reset_click}
  - type: Button
    properties: {width: default, align: center, height: '', enabled: true, visible: true,
      text: Run, font_size: '14', italic: false, background: '', bold: false, underline: false}
    name: btn_run
    layout_properties: {row: TTUYGN, width_xs: 3, col_xs: 9}
    event_bindings: {click: btn_run_click}
  - type: Canvas
    properties: {width: default, height: 443}
    name: canvas
    layout_properties: {row: SNJBVG, width_xs: 12, col_xs: 0}
  - name: timer
    type: Timer
    properties: {interval: 0.01}
  code: "from anvil import *\nimport physics\nimport draw\nimport math\n\nclass Form1(Form1Template):\n\
    \  def canvas_mouse_move (self, x, y, **event_args):\n\n      # This method is\
    \ called when the mouse cursor moves over this component\n      #record mouse\
    \ pos\n    #   self.mouse.x = x/(self.xu*1.0)\n    #   self.mouse.y = (self.ch-y)/(self.xu*1.0)\n\
    \    pass\n\n  def canvas_mouse_up (self, x, y, button, **event_args):\n     \
    \ # This method is called when a mouse button is released on this component\n\
    \    #   self.mouse.x = x/(self.xu*1.0)\n    #   self.mouse.y = (self.ch-y)/(self.xu*1.0)\n\
    \    pass\n\n\n  def canvas_mouse_down (self, x, y, button, **event_args):\n \
    \     # This method is called when a mouse button is pressed on this component\n\
    \    #   self.mouse.x = x/(self.xu*1.0)\n    #   self.mouse.y = (self.ch-y)/(self.xu*1.0)\n\
    \    pass\n  def btn_run_click (self, **event_args):\n    # This method is called\
    \ when the button is clicked\n      #if not self.running:\n    #  self.running\
    \  = True\n    #  self.reset = False\n    #  self.btn_run.text = \"Pause\"\n\n\
    \    #else:\n    #  self.running = False\n    #  self.btn_run.text = \"Run\"\n\
    \    pass\n\n\n  def btn_reset_click (self, **event_args):\n    # This method\
    \ is called when the button is clicked\n        #self.running = False\n    #self.reset\
    \ = True\n    #self.btn_run.text = \"Run\"\n    pass\n\n  def timer_tick (self,\
    \ **event_args):\n    # canvas = self.canvas\n    # self.cw = canvas.get_width()\n\
    \    # self.ch = canvas.get_height()\n    # cw = self.cw\n    # ch = self.ch\n\
    \    # dt = self.dt\n    # if self.first:\n    #       pass\n    # self.t += self.dt\n\
    \    pass\n\n  def __init__(self):\n    # This sets up a variable for every component\
    \ on this form.\n    # For example, if we've drawn a button called \"send_button\"\
    , we can\n    # refer to it as self.send_button:\n    self.init_components()\n\
    \    #self.mouse = physics.vector3(0,0)\n\n    # Any code you write here will\
    \ run when the form opens.\n    #Uncomment as required.\n    #self.running= False\n\
    \    #self.reset = True\n    #self.dt = self.timer.interval\n    #self.first =\
    \ True\n\n    #self.t = 0\n    #SET SCALE (pixels per m, or unit used in code)\n\
    \    #self.xu = 1\n\n    #APPEND ALL PARAMETER BOXES\n    #self.param_boxes= []\n"
services:
- source: https://googledrive.com/host/0B64-jtRjOa-beGlseURfdnFISWc/physics.yml
  client_config: {}
  server_config: {}
- source: https://googledrive.com/host/0B64-jtRjOa-beGlseURfdnFISWc/draw.yml
  client_config: {}
  server_config: {}
- source: https://googledrive.com/host/0B4vNASfKS0OUfmxWQU5ic0NKTXROU0h5VTRTUHM3QW9Dal9IbkVzS2hybFdKTmJ6Tkhld1U/isaac.yml
  client_config: {}
  server_config: {}
